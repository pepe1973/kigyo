<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SnakeLib</name>
    </assembly>
    <members>
        <member name="T:SnakeLib.Brains.RightieSnakeBrain">
            <summary>
            Snake that goes Right, no matter what happens.
            </summary>
        </member>
        <member name="T:SnakeLib.Brains.LeftieSnakeBrain">
            <summary>
            Snake that goes Left, no matter what happens.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.Field">
            <summary>
            The Field where the game plays.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.SnakeID">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.Enemy">
            <summary>
            The other snake, who shall DIE.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.Me">
            <summary>
            The greatest'n'bravest of all snakes.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.SnakePowerUps">
            <summary>
            Picked up power ups
            </summary>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.GetHeadForDirection(SnakeLib.Direction)">
            <summary>
            Helper method that returns what the next head position would be if the snake moved in the 
            given direction. Does not handle diagonal directions.
            </summary>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.GetHeadForMovement(SnakeLib.Movement)">
            <summary>
            Helper method that returns what the next head position would be if the snake moved in the 
            given direction. Handles diagonal directions.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.Name">
            <summary>
            The name of the brain.
            </summary>
        </member>
        <member name="P:SnakeLib.Brains.SnakeBrainBase.Author">
            <summary>
            Name of the creator of the brain (i.e. the super-brain)
            </summary>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.GetNextMovement(System.Boolean)">
            <summary>
            Main method to control snake.
            </summary>
            <param name="grow">In parameter whether snake will grow or not.</param>
            <returns></returns>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.AppleGone(SnakeLib.Apple)">
            <summary>
            Brain implementations can handle cases when an apple is gone from the field
            </summary>
            <param name="apple"></param>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.PowerUpGone(SnakeLib.PowerUp)">
            <summary>
            Brain implementations can handle cases when an powerUp is gone from the field
            </summary>
            <param name="powerUp"></param>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.AppleAdded(SnakeLib.Apple)">
            <summary>
            Brain implementations can handle cases when an apple is added to the field
            </summary>
            <param name="apple"></param>
        </member>
        <member name="M:SnakeLib.Brains.SnakeBrainBase.PowerUpAdded(SnakeLib.PowerUp)">
            <summary>
            Brain implementations can handle cases when an powerUp is added to the field
            </summary>
            <param name="powerUp"></param>
        </member>
        <member name="P:SnakeLib.Movement.Direction">
            <summary>
            Returns the cell information for the given location
            </summary>
        </member>
        <member name="P:SnakeLib.Movement.PowerUp">
            <summary>
            The active powerup that will be is used in current step.
            </summary>
        </member>
        <member name="M:SnakeLib.Movement.ActivateReversePowerUp">
            <summary>
            Your snake will turn around in its step.
            </summary>
        </member>
        <member name="M:SnakeLib.Movement.ActivateDiagonalPowerUp(SnakeLib.Direction)">
            <summary>
            Your Snake will step diagonally based on <code>Direction</code> and <code>secondDir</code>
            </summary>
            <param name="secondDir">Direction for diagonal move</param>
        </member>
        <member name="M:SnakeLib.Movement.IsReversePowerUpActivated">
            <summary>
            Return true if you activated the Reverse powerup
            </summary>
        </member>
        <member name="M:SnakeLib.Movement.IsDiagonalPowerUpActivated">
            <summary>
            Return true if you activated the Diagonal powerup
            </summary>
        </member>
        <member name="T:SnakeLib.Enums.PowerUpType">
            <summary>
            Types of PowerUps
            </summary>
        </member>
        <member name="F:SnakeLib.Enums.PowerUpType.NoWall">
            <summary>
            Can pass through 1 block of wall. Passive (means activated automatically when hitting a wall).
            </summary>
        </member>
        <member name="F:SnakeLib.Enums.PowerUpType.Diagonal">
            <summary>
            Can step diagonally. Need to define a second direction.
            </summary>
        </member>
        <member name="F:SnakeLib.Enums.PowerUpType.Reverse">
            <summary>
            Snake turns around (head replaced with tail) and move 1 step in given direction.
            </summary>
        </member>
        <member name="T:SnakeLib.PowerUp">
            <summary>
            Represents a PowerUp with a location, lifetime, age and usages left.
            </summary>
        </member>
        <member name="M:SnakeLib.Controls.SnakeGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:SnakeLib.Controls.SnakeGrid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SnakeLib.Controls.SnakeGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SnakeLib.Controls.SnakeTesterPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SnakeLib.Controls.SnakeTesterPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SnakeLib.Controls.SnakeTesterPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SnakeLib.Engine.CheckIfThinkTimeExceeded">
            <summary>
            Check if think time was exceeded for any of the snakes.
            </summary>
            <returns>true if exceeded and handled, false otherwise</returns>
        </member>
        <member name="M:SnakeLib.Engine.IsPickingPowerUp">
            <summary>
            If any of the snakes hit a powerUp
            </summary>
        </member>
        <member name="M:SnakeLib.Engine.IsHittingWall(System.Boolean@,System.Boolean@)">
            <summary>
            If snakes hit wall
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.Item(SnakeLib.Point)">
            <summary>
            Returns the cell information for the given location
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.Item(System.Int32,System.Int32)">
            <summary>
            Returns the cell information for the given location
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.Apples">
            <summary>
            The list of apples visible in the field.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.PowerUps">
            <summary>
            The list of PowerUps visible in the field.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.Snakes">
            <summary>
            The list of snakes.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.GrowthRate">
            <summary>
            The number of steps after which the snakes are growing by one
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.AppleFrequency">
            <summary>
            The average number of steps between apples are put in the field. The smaler this number is,
            the more often will apples appear.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.MinAppleLife">
            <summary>
            The minimum number of steps while an apple is displayed.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.MaxAppleLife">
            <summary>
            The maximum number of steps while an apple is displayed.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.PointsForApple">
            <summary>
            The number of points the snake eating an apple is awarded.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.WinPoints">
            <summary>
            The player reaching this score wins.
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.XSize">
            <summary>
            The width of the game field
            </summary>
        </member>
        <member name="P:SnakeLib.GameField.YSize">
            <summary>
            The height of the game field
            </summary>
        </member>
        <member name="M:SnakeLib.GameField.UpdateSnakes">
            <summary>
            Update the snakes in the game field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SnakeLib.GameField.FieldPlan">
            <summary>
            The original field plan that ws loaded
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.Head">
            <summary>
            The position of the head
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.Tail">
            <summary>
            The position of the tail (i.e. the last element of the snake)
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.LastTail">
            <summary>
            The position of the tail as it was in the previous step. It can be null if 
            the snake has just grown or has not moved yet.
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.MovementDirection">
            <summary>
            The direction the snake moved previously. This is null at the first move.
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.Score">
            <summary>
            The current score of the snake
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.ThinkTime">
            <summary>
            The total thinking time of the snake
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.Size">
            <summary>
            The current size of the snake
            </summary>
        </member>
        <member name="P:SnakeLib.Snake.Item(System.Int32)">
            <summary>
            Returns the given point of the snake. The point at the 0. position is the Head, 
            the point at the last position (Size - 1) is the Tail.
            </summary>
        </member>
        <member name="F:SnakeTester.ReplayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SnakeTester.ReplayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SnakeTester.ReplayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
